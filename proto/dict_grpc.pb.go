// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SynonymDictClient is the client API for SynonymDict service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SynonymDictClient interface {
	CreateSynonym(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Synonym, error)
	GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	GetSynonym(ctx context.Context, in *Request, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	DeleteSynonym(ctx context.Context, in *Synonym, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Synonym, error)
}

type synonymDictClient struct {
	cc grpc.ClientConnInterface
}

func NewSynonymDictClient(cc grpc.ClientConnInterface) SynonymDictClient {
	return &synonymDictClient{cc}
}

func (c *synonymDictClient) CreateSynonym(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Synonym, error) {
	out := new(Synonym)
	err := c.cc.Invoke(ctx, "/dict.SynonymDict/CreateSynonym", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synonymDictClient) GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/dict.SynonymDict/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synonymDictClient) GetSynonym(ctx context.Context, in *Request, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/dict.SynonymDict/GetSynonym", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synonymDictClient) DeleteSynonym(ctx context.Context, in *Synonym, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dict.SynonymDict/DeleteSynonym", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synonymDictClient) Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Synonym, error) {
	out := new(Synonym)
	err := c.cc.Invoke(ctx, "/dict.SynonymDict/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynonymDictServer is the server API for SynonymDict service.
// All implementations must embed UnimplementedSynonymDictServer
// for forward compatibility
type SynonymDictServer interface {
	CreateSynonym(context.Context, *Request) (*Synonym, error)
	GetAll(context.Context, *Request) (*httpbody.HttpBody, error)
	GetSynonym(context.Context, *Request) (*httpbody.HttpBody, error)
	DeleteSynonym(context.Context, *Synonym) (*Response, error)
	Update(context.Context, *Request) (*Synonym, error)
	mustEmbedUnimplementedSynonymDictServer()
}

// UnimplementedSynonymDictServer must be embedded to have forward compatible implementations.
type UnimplementedSynonymDictServer struct {
}

func (UnimplementedSynonymDictServer) CreateSynonym(context.Context, *Request) (*Synonym, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSynonym not implemented")
}
func (UnimplementedSynonymDictServer) GetAll(context.Context, *Request) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSynonymDictServer) GetSynonym(context.Context, *Request) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSynonym not implemented")
}
func (UnimplementedSynonymDictServer) DeleteSynonym(context.Context, *Synonym) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSynonym not implemented")
}
func (UnimplementedSynonymDictServer) Update(context.Context, *Request) (*Synonym, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSynonymDictServer) mustEmbedUnimplementedSynonymDictServer() {}

// UnsafeSynonymDictServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SynonymDictServer will
// result in compilation errors.
type UnsafeSynonymDictServer interface {
	mustEmbedUnimplementedSynonymDictServer()
}

func RegisterSynonymDictServer(s grpc.ServiceRegistrar, srv SynonymDictServer) {
	s.RegisterService(&SynonymDict_ServiceDesc, srv)
}

func _SynonymDict_CreateSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynonymDictServer).CreateSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.SynonymDict/CreateSynonym",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynonymDictServer).CreateSynonym(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynonymDict_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynonymDictServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.SynonymDict/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynonymDictServer).GetAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynonymDict_GetSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynonymDictServer).GetSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.SynonymDict/GetSynonym",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynonymDictServer).GetSynonym(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynonymDict_DeleteSynonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Synonym)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynonymDictServer).DeleteSynonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.SynonymDict/DeleteSynonym",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynonymDictServer).DeleteSynonym(ctx, req.(*Synonym))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynonymDict_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynonymDictServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.SynonymDict/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynonymDictServer).Update(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SynonymDict_ServiceDesc is the grpc.ServiceDesc for SynonymDict service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SynonymDict_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dict.SynonymDict",
	HandlerType: (*SynonymDictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSynonym",
			Handler:    _SynonymDict_CreateSynonym_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _SynonymDict_GetAll_Handler,
		},
		{
			MethodName: "GetSynonym",
			Handler:    _SynonymDict_GetSynonym_Handler,
		},
		{
			MethodName: "DeleteSynonym",
			Handler:    _SynonymDict_DeleteSynonym_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SynonymDict_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dict.proto",
}
